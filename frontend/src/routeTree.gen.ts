/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as StudentRouteImport } from './routes/student'
import { Route as RoomtypeRouteImport } from './routes/roomtype'
import { Route as RoomRouteImport } from './routes/room'
import { Route as InvoiceRouteImport } from './routes/invoice'
import { Route as ContractRouteImport } from './routes/contract'
import { Route as IndexRouteImport } from './routes/index'

const StudentRoute = StudentRouteImport.update({
  id: '/student',
  path: '/student',
  getParentRoute: () => rootRouteImport,
} as any)
const RoomtypeRoute = RoomtypeRouteImport.update({
  id: '/roomtype',
  path: '/roomtype',
  getParentRoute: () => rootRouteImport,
} as any)
const RoomRoute = RoomRouteImport.update({
  id: '/room',
  path: '/room',
  getParentRoute: () => rootRouteImport,
} as any)
const InvoiceRoute = InvoiceRouteImport.update({
  id: '/invoice',
  path: '/invoice',
  getParentRoute: () => rootRouteImport,
} as any)
const ContractRoute = ContractRouteImport.update({
  id: '/contract',
  path: '/contract',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/contract': typeof ContractRoute
  '/invoice': typeof InvoiceRoute
  '/room': typeof RoomRoute
  '/roomtype': typeof RoomtypeRoute
  '/student': typeof StudentRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/contract': typeof ContractRoute
  '/invoice': typeof InvoiceRoute
  '/room': typeof RoomRoute
  '/roomtype': typeof RoomtypeRoute
  '/student': typeof StudentRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/contract': typeof ContractRoute
  '/invoice': typeof InvoiceRoute
  '/room': typeof RoomRoute
  '/roomtype': typeof RoomtypeRoute
  '/student': typeof StudentRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/contract' | '/invoice' | '/room' | '/roomtype' | '/student'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/contract' | '/invoice' | '/room' | '/roomtype' | '/student'
  id:
    | '__root__'
    | '/'
    | '/contract'
    | '/invoice'
    | '/room'
    | '/roomtype'
    | '/student'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ContractRoute: typeof ContractRoute
  InvoiceRoute: typeof InvoiceRoute
  RoomRoute: typeof RoomRoute
  RoomtypeRoute: typeof RoomtypeRoute
  StudentRoute: typeof StudentRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/student': {
      id: '/student'
      path: '/student'
      fullPath: '/student'
      preLoaderRoute: typeof StudentRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/roomtype': {
      id: '/roomtype'
      path: '/roomtype'
      fullPath: '/roomtype'
      preLoaderRoute: typeof RoomtypeRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/room': {
      id: '/room'
      path: '/room'
      fullPath: '/room'
      preLoaderRoute: typeof RoomRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/invoice': {
      id: '/invoice'
      path: '/invoice'
      fullPath: '/invoice'
      preLoaderRoute: typeof InvoiceRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/contract': {
      id: '/contract'
      path: '/contract'
      fullPath: '/contract'
      preLoaderRoute: typeof ContractRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ContractRoute: ContractRoute,
  InvoiceRoute: InvoiceRoute,
  RoomRoute: RoomRoute,
  RoomtypeRoute: RoomtypeRoute,
  StudentRoute: StudentRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
